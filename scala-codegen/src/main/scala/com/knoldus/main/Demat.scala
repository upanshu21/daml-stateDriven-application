/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.knoldus {
  package Main {
    final case class Demat(owner: ` lfdomainapi`.Primitive.Party, broker: ` lfdomainapi`.Primitive.Party, amount: ` lfdomainapi`.Primitive.Int64, max_amount: ` lfdomainapi`.Primitive.Int64, buy_Share: ` lfdomainapi`.Primitive.Text) extends ` lfdomainapi`.Template[Demat] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = Demat
    }

    object Demat extends ` lfdomainapi`.TemplateCompanion[Demat] with _root_.scala.Function5[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Int64, ` lfdomainapi`.Primitive.Int64, ` lfdomainapi`.Primitive.Text, _root_.com.knoldus.Main.Demat] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val owner: ` C`[` lfdomainapi`.Primitive.Party];
        val broker: ` C`[` lfdomainapi`.Primitive.Party];
        val amount: ` C`[` lfdomainapi`.Primitive.Int64];
        val max_amount: ` C`[` lfdomainapi`.Primitive.Int64];
        val buy_Share: ` C`[` lfdomainapi`.Primitive.Text];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val owner = ` f`(` view`.owner);
            override val broker = ` f`(` view`.broker);
            override val amount = ` f`(` view`.amount);
            override val max_amount = ` f`(` view`.max_amount);
            override val buy_Share = ` f`(` view`.buy_Share)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.Main, moduleName = "Main", entityName = "Demat");
      final implicit class `Demat syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseRequestShare(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.Main.RequestShare)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.ShareRequest]] = ` exercise`(id, "RequestShare", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseRequestShare(actor: ` lfdomainapi`.Primitive.Party, requestQuantity: ` lfdomainapi`.Primitive.Int64)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.ShareRequest]] = exerciseRequestShare(actor, _root_.com.knoldus.Main.RequestShare(requestQuantity));
        def exerciseAuthorizeInvestor(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.Main.AuthorizeInvestor)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]] = ` exercise`(id, "AuthorizeInvestor", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseAuthorizeInvestor(actor: ` lfdomainapi`.Primitive.Party, investor: ` lfdomainapi`.Primitive.Party, updated_Token: ` lfdomainapi`.Primitive.Int64)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]] = exerciseAuthorizeInvestor(actor, _root_.com.knoldus.Main.AuthorizeInvestor(investor, updated_Token));
        def exerciseBuyShares(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.Main.BuyShares)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[com.knoldus.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat], ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]]] = ` exercise`(id, "BuyShares", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseBuyShares(actor: ` lfdomainapi`.Primitive.Party, quantity: ` lfdomainapi`.Primitive.Int64, toDematId: ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[com.knoldus.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat], ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]]] = exerciseBuyShares(actor, _root_.com.knoldus.Main.BuyShares(quantity, toDematId));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.knoldus.DA.Internal.Template.Archive());
        def exerciseAcceptRequest(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.Main.AcceptRequest)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[com.knoldus.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat], ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]]] = ` exercise`(id, "AcceptRequest", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseAcceptRequest(actor: ` lfdomainapi`.Primitive.Party, requestId: ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.ShareRequest])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Demat]): ` lfdomainapi`.Primitive.Update[com.knoldus.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat], ` lfdomainapi`.Primitive.ContractId[com.knoldus.Main.Demat]]] = exerciseAcceptRequest(actor, _root_.com.knoldus.Main.AcceptRequest(requestId))
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("BuyShares", "Archive"));
      override def toNamedArguments(` self` : Demat) = ` arguments`(scala.Tuple2("owner", ` lfdomainapi`.Value.encode(` self`.owner)), scala.Tuple2("broker", ` lfdomainapi`.Value.encode(` self`.broker)), scala.Tuple2("amount", ` lfdomainapi`.Value.encode(` self`.amount)), scala.Tuple2("max_amount", ` lfdomainapi`.Value.encode(` self`.max_amount)), scala.Tuple2("buy_Share", ` lfdomainapi`.Value.encode(` self`.buy_Share)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(5))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "owner"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "broker"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "amount"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "max_amount"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv3) match {
                        case _root_.scala.Some(z3) => (` r`.fields(4) match {
                          case ` rpcvalue`.RecordField((""| "buy_Share"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv4) match {
                            case _root_.scala.Some(z4) => Some(Demat(z0, z1, z2, z3, z4))
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val owner = lte.field("owner", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val broker = lte.field("broker", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val amount = lte.field("amount", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte));
          val max_amount = lte.field("max_amount", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte));
          val buy_Share = lte.field("buy_Share", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.knoldus.Main.Demat] = {
        val `recordFields `: lte.RecordFields[_root_.com.knoldus.Main.Demat] = lte.RecordFields.xmapN(lte.fields(`view `.owner), lte.fields(`view `.broker), lte.fields(`view `.amount), lte.fields(`view `.max_amount), lte.fields(`view `.buy_Share))({
          case scala.Tuple5(owner, broker, amount, max_amount, buy_Share) => _root_.com.knoldus.Main.Demat(owner, broker, amount, max_amount, buy_Share)
        })({
          case _root_.com.knoldus.Main.Demat(owner, broker, amount, max_amount, buy_Share) => scala.Tuple5(owner, broker, amount, max_amount, buy_Share)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
