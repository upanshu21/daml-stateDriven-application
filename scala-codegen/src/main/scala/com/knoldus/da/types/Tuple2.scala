/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.knoldus {
  package DA {
    package Types {
      final case class Tuple2[+t1, +t2](_1: t1, _2: t2) extends ` lfdomainapi`.ValueRef

      object Tuple2 extends ` lfdomainapi`.ValueRefCompanion {
        import _root_.scala.language.higherKinds;
        trait view[t1, t2, ` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, (scala.AnyRef {
          type ` l`[` c`[_]] = view[t1, t2, ` c`]
        })# ` l`] { $u0020view =>
          val _1: ` C`[t1];
          val _2: ` C`[t2];
          final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[t1, t2, ` D`] = {
            final class $anon extends _root_.scala.AnyRef with view[t1, t2, ` D`] {
              override val _1 = ` f`(` view`._1);
              override val _2 = ` f`(` view`._2)
            };
            new $anon()
          }
        };
        implicit def `Tuple2 Value`[t1, t2](implicit `ev 0`: ` lfdomainapi`.Value[t1], `ev 1`: ` lfdomainapi`.Value[t2]): ` lfdomainapi`.Value[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] = {
          final class $anon extends this.`Value ValueRef`[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] {
            override def write(value: _root_.com.knoldus.DA.Types.Tuple2[t1, t2]): ` rpcvalue`.Value.Sum = ` record`(scala.Tuple2("_1", ` lfdomainapi`.Value.encode(value._1)), scala.Tuple2("_2", ` lfdomainapi`.Value.encode(value._2)));
            override def read(argValue: ` rpcvalue`.Value.Sum): _root_.scala.Option[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] = argValue.record.flatMap(((` r` ) => if (` r`.fields.length.==(2))
              ` r`.fields(0) match {
                case ` rpcvalue`.RecordField((""| "_1"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[t1](zv0) match {
                  case _root_.scala.Some(_1) => (` r`.fields(1) match {
                    case ` rpcvalue`.RecordField((""| "_2"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[t2](zv1) match {
                      case _root_.scala.Some(_2) => Some(Tuple2(_1, _2))
                      case _root_.scala.None => _root_.scala.None
                    })
                    case _ => _root_.scala.None
                  })
                  case _root_.scala.None => _root_.scala.None
                })
                case _ => _root_.scala.None
              }
            else
              _root_.scala.None))
          };
          new $anon()
        };
        override protected val ` dataTypeId` = ` mkDataTypeId`(`Package IDs`.`DA.Types`, "DA.Types", "Tuple2");
        implicit def `Tuple2 LfEncodable`[t1, t2](implicit evt1: ` lfdomainapi`.encoding.LfEncodable[t1], evt2: ` lfdomainapi`.encoding.LfEncodable[t2]): ` lfdomainapi`.encoding.LfEncodable[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] = {
          final class $anon extends ` lfdomainapi`.encoding.LfEncodable[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] {
            override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): lte.Out[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] = {
              object `view ` extends view[t1, t2, lte.Field] {
                val _1 = lte.field("_1", ` lfdomainapi`.encoding.LfEncodable.encoding[t1](lte));
                val _2 = lte.field("_2", ` lfdomainapi`.encoding.LfEncodable.encoding[t2](lte))
              };
              {
                val `recordFields `: lte.RecordFields[_root_.com.knoldus.DA.Types.Tuple2[t1, t2]] = lte.RecordFields.xmapN(lte.fields(`view `._1), lte.fields(`view `._2))({
                  case scala.Tuple2(_1, _2) => _root_.com.knoldus.DA.Types.Tuple2[t1, t2](_1, _2)
                })({
                  case _root_.com.knoldus.DA.Types.Tuple2(_1, _2) => scala.Tuple2(_1, _2)
                });
                lte.record(` dataTypeId`, `recordFields `)
              }
            }
          };
          new $anon()
        }
      }
    }
  }
}
